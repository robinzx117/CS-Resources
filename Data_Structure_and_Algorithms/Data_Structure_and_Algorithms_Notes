时间复杂度 (Time complexity)
O(n):     就代表数据量增大几倍，耗时也增大几倍。比如常见的遍历算法。
O(n^2):   就代表数据量增大n倍时，耗时增大n的平方倍，这是比线性更高的时间复杂度。比如冒泡排序，就是典型的O(n^2)的算法，对n个数排序，需要扫描n×n次。
O(logn):  当数据增大n倍时，耗时增大logn倍（这里的log是以2为底的，比如，当数据增大256倍时，耗时只增大8倍，是比线性还要低的时间复杂度）。二分查找就是O(logn)的算法，每找一次排除一半的可能，
          256个数据中查找只要找8次就可以找到目标。
O(nlogn): 就是n乘以logn，当数据增大256倍时，耗时增大256*8=2048倍。这个复杂度高于线性低于平方。归并排序就是O(nlogn)的时间复杂度。
O(1):     就是最低的时空复杂度了，也就是耗时/耗空间与输入数据大小无关，无论输入数据增大多少倍，耗时/耗空间都不变。 哈希算法就是典型的O(1)时间复杂度，无论数据规模多大，都可以在一次计算后找到
          目标（不考虑冲突的话）。
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Linked list is also a linear data structure. Each element in the linked list is actually a separate object while all the objects are linked together by the reference field in
each element.
-There are two types of linked list: singly linked list and doubly linked list.
-Each node in a singly-linked list contains not only the value but also a reference field to link to the next node. By this way, the singly-linked list organizes all the nodes
 in a sequence. In most cases, we will use the head node (the first node) to represent the whole list. Unlike the array, we are not able to access a random element in a
 singly-linked list in constant time. If we want to get the ith element, we have to traverse from the head node one by one. It takes us O(N) time on average to visit an element
 by index, where N is the length of the linked list.

Add Operation - Singly Linked List
-If we want to add a new value after a given node prev, we should:
 1.Initialize a new node cur with the given value;
 2.Link the "next" field of cur to prev's next node next;
 3.Link the "next" field in prev to cur.
 Unlike an array, we don’t need to move all elements past the inserted element. Therefore, you can insert a new node into a linked list in O(1) time complexity, which is very
 efficient.
-Add a Node at the Beginning: As we know, we use the head node head to represent the whole list. So it is essential to update head when adding a new node at the beginning of
 the list.
 1.Initialize a new node cur;
 2.Link the new node to our original head node head.
 3.Assign cur to head.

Delete Operation - Singly Linked List
-If we want to delete an existing node cur from the singly linked list, we can do it in two steps:
 1.Find cur's previous node prev and its next node next;
 2.Link prev to cur's next node next.
 In our first step, we need to find out prev and next. It is easy to find out next using the reference field of cur. However, we have to traverse the linked list from the head
 node to find out prev which will take O(N) time on average, where N is the length of the linked list. So the time complexity of deleting a node will be O(N). The space
 complexity is O(1) because we only need constant space to store our pointers.
-Delete the First Node
 We use the head node head to represent a linked list. If we want to delete the first node, we can simply assign the next node to head.

Definition for singly-linked list.
 * Java:
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 Dummy node: a dummy node at the front/end of the linked-list that is there only to reduce the need for special-case code in the linked-list operations. It is an empty template
 to build new nodes later.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
堆栈（stack）又称为栈或堆叠，是计算机科学中的一种抽象资料类型，只允许在有序的线性资料集合的一端（称为堆栈顶端top）进行加入数据和移除数据的运算。因而按照后进先出（LIFO, Last In First Out）的
原理运作。
堆栈使用两种基本操作：
推入（压栈，push）：将资料放入堆栈顶端。
弹出（弹栈，pop） ：将堆栈顶端资料移除。
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
A tree is a frequently-used data structure to simulate a hierarchical tree structure.
Each node of the tree will have a root value and a list of references to other nodes which are called child nodes. From graph view, a tree can also be defined as a directed
acyclic graph which has N nodes and N-1 edges.
A Binary Tree is one of the most typical tree structure. As the name suggests, a binary tree is a tree data structure in which each node has at most two children, which are
referred to as the left child and the right child.

Definition for a binary tree node.
 * Java:
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }

-Pre-order traversal is to visit the root first. Then traverse the left subtree. Finally, traverse the right subtree.
-In-order traversal is to traverse the left subtree first. Then visit the root. Finally, traverse the right subtree.
-Post-order traversal is to traverse the left subtree first. Then traverse the right subtree. Finally, visit the root.
It is worth noting that when you delete nodes in a tree, deletion process will be in post-order. That is to say, when you delete a node, you will delete its left child and its
right child before you delete the node itself. Also, post-order is widely use in mathematical expression. It is easier to write a program to parse a post-order expression.

-Level-order traversal is to traverse the tree level by level.
 Breadth-First Search is an algorithm to traverse or search in data structures like a tree or a graph. The algorithm starts with a root node and visit the node itself first.
 Then traverse its second level neighbors, traverse its third level neighbors, so on and so forth.
 When we do breadth-first search in a tree, the order of the nodes we visited is in level order. Typically, we use a queue to help us to do BFS.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Sliding Window Algorithm:
用以解决数组/字符串的子元素问题，它可以将嵌套的循环问题，转换为单循环问题，降低时间复杂度。
A sliding window is an abstract concept commonly used in array/string problems. A window is a range of elements in the array/string which usually defined by the start and end
indices, i.e. [i, j) (left-closed, right-open). A sliding window is a window "slides" its two boundaries to the certain direction. For example, if we slide [i, j) to
the right by 1 element, then it becomes [i+1, j+1) (left-closed, right-open).
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
双指针技巧分为两类，一类是「快慢指针」，一类是「左右指针」。
前者主要解决链表中的问题，比如典型的判定链表中是否包含环；后者主要解决数组（或者字符串）中的问题，比如二分查找。
Two pointers: one slow-runner and one fast-runner.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
二分查找是一种基于比较目标值和数组中间元素的教科书式算法:
-如果目标值等于中间元素，则找到目标值。
-如果目标值较小，继续在左侧搜索。
-如果目标值较大，则继续在右侧搜索。

算法：
初始化指针 left = 0, right = n - 1。
当 left <= right：
比较中间元素 nums[pivot] 和目标值 target。
如果 target = nums[pivot]，返回 pivot。
如果 target < nums[pivot]，则在左侧继续搜索 right = pivot - 1。
如果 target > nums[pivot]，则在右侧继续搜索 left = pivot + 1。

动态规划:
1.确定状态
2.转移方程
3.初始条件和边界情况
4.计算顺序
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
An in-place algorithm is an algorithm which transforms input using no auxiliary data structure. However a small amount of extra storage space is allowed for auxiliary variables.
The input is usually overwritten by the output as the algorithm executes. In-place algorithm updates input sequence only through replacement or swapping of elements.
An algorithm which is not in-place is sometimes called not-in-place or out-of-place.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
