https://www.python.org/doc/
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Data Types:
-boolean
-integer
-float
-string // Python 3 stores strings using Unicode.
-list
-None
-complex
-object
-set
-dictionary
...

myList = ['a', 'b', 'c', 'd', 'e']
myList.sort()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
A library is a collection of functions that can be accessed to complete certain programming tasks without having to write your own algorithm.

Numpy: is a library for working with arrays of data. It is the fundamental package for scientific computing with Python.
 It contains among other things:
 -a powerful N-dimensional array object
 -sophisticated (broadcasting) functions
 -tools for integrating C/C++ and Fortran code
 -useful linear algebra, Fourier transform, and random number capabilities

Pandas: provides high-performance, easy-to-use data structures and data analysis tools.

Scipy: is a library of techniques for numerical and scientific computing.
 Numpy provides a high-performance multi-dimensional array and basic tools to compute with and manipulate these arrays. SciPy builds on this, and provides a large number of
 functions that operate on numpy arrays and are useful for different types of scientific and engineering applications.
 *SciPy.Stats: contains a large number of probability distributions as well as a growing library of statistical functions such as:
  -Continuous and Discrete Distributions (i.e Normal, Uniform, Binomial, etc.)
  -Descriptive Statistcs
  -Statistical Tests (i.e T-Test)

Matplotlib: is a library for making graphs.

Seaborn: is a higher-level interface to Matplotlib that can be used to simplify many graphing tasks. It is complimentary to Matplotlib and it specifically targets statistical
 data visualization. But it goes even further than that: Seaborn extends Matplotlib and makes generating visualizations convenient. While Matplotlib is a robust solution for
 various problems, Seaborn utilizes more concise paramesters for ease-of-use.

Statsmodels: is a library that implements many statistical techniques.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
dir() - lists capabilities. The ones with underscores are used by Python itself, the rest are real operations that the object can perform.
type() - it tells us something about a variable.
decode() - it is used to convert from one encoding scheme, in which argument string is encoded to the desired encoding scheme. This works opposite to the encode. It accepts
           the encoding of the encoding string to decode it and returns the original string.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Parent:
    x = 0
    def __init__(self, num):
        self.x = num
        print(self.x, "constructed")

    def fun(self):
        self.x = self.x + 1

    def __del__(self):
        print("I am destructed", self.x)

class Child(Parent):
    y = 0
    def fun2(self):
        self.y = self.y + 1
        self.fun()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Python uses C-style string formatting to create new, formatted strings. The "%" operator is used to format a set of variables enclosed in a "tuple" (a fixed size list), together
with a format string, which contains normal text together with "argument specifiers", special symbols like "%s" and "%d".
# This prints out "Hello, John!"
name = "John"
print("Hello, %s!" % name)

# This prints out "John is 23 years old."
name = "John"
age = 23
print("%s is %d years old." % (name, age))
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import os
The OS module in python provides functions for interacting with the operating system. OS, comes under Python's standard utility modules. This module provides a portable way of
using operating system dependent functionality. The *os* and *os.path* modules include many functions to interact with the file system.

import sys
This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. It is always available.

import threading
This module constructs higher-level threading interfaces on top of the lower level _thread module.
threading.Thread方法可以接收两个参数，第一个是target，一般指向函数名，第二个是args，需要向函数传递的参数。
