32位处理器一次只能处理32位，也就是4个字节的数据；而64位处理器一次就能处理64位，即8个字节的数据。
如果将总长128位的指令分别按16位、32位、64位为单位进行编辑的话：32位的处理器需要4个指令，而64位处理器则只要两个指令。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
In Java:
int is 32 bits (–2,147,483,648 to 2,147,483,647)
long is 64 bits (–9,223,372,036,854,775,808 to 9,223,372,036,854,775,807)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASCII（American Standard Code for Information Interchange，美国标准信息交换码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本延伸美国标准信息交换码则可以部分支持其
他西欧语言，并等同于国际标准ISO/IEC 646。
EASCII（Extended ASCII，延伸美国标准信息交换码）是将ASCII码由7位扩充为8位而成。EASCII的内码是由0到255共有256个字符组成。EASCII码比ASCII码扩充出来的符号包括表格符号、计算符号、希腊字母和特
殊的拉丁符号。
int[26]  for Letters 'a' - 'z' or 'A' - 'Z'
int[128] for ASCII
int[256] for Extended ASCII
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UTF stands for "Unicode Transformation Format." The most commonly used encodings are UTF-8, UTF-16, and UCS-2(a precursor of UTF-16 without full support for Unicode);
GB18030 is standardized in China and implements Unicode fully, while not an official Unicode standard.
Unicode is also a character encoding but uses variable bit encoding.
Unicode defines 2^21 characters. Unicode is a superset of ASCII. Unicode represents more characters than ASCII.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The Hamming weight of a string is the number of symbols that are different from the zero-symbol of the alphabet used.

位运算符作用在所有的位上，并且按位运算。假设A=60，B=13,它们的二进制格式表示将如下：
A = 0011 1100
B = 0000 1101
-----------------
A&B = 0000 1100
A|B = 0011 1101
A^B = 0011 0001
~A  = 1100 0011
&  (bitwise AND) 如果相对应位都是1，则结果为1，否则为0.            （A&B） 得到12， 即0000 1100
|  (bitwise OR)  如果相对应位都是0，则结果为0，否则为1.            （A|B） 得到61， 即0011 1101
^  (bitwise XOR) 如果相对应位值相同，则结果为0，否则为1.           （A^B） 得到49， 即0011 0001
~  (bitwise NOT) 按位取反运算符翻转操作数的每一位，即0变成1，1变成0.（~A）  得到-61，即1100 0011
<< (bitwise left shift)
>> (bitwise right shift)
== has higher precedence than &

掩码（Mask）在计算机学科及数字逻辑中指的是一串二进制数字，通过与目标数字的按位操作，达到屏蔽指定位而实现需求。
If we take XOR(^) of zero and some bit, it will return that bit:
a⊕0=a
If we take XOR of two same bits, it will return 0:
a⊕a=0
a⊕b⊕a = (a⊕a)⊕b = 0⊕b = b

(x^y) is addition without carry. (x&y) is the carry-out from each bit. (x&y)<<1 is the carry-in to each bit.

public int hammingWeight(int n) {
    int bits = 0;
    int mask = 1;
    for (int i=0; i<32; i++) {
        if ((n&mask) != 0) {
            bits++;
        }
        mask <<= 1;
    }
    return bits;
}
// We check each of the 32 bits of the number. If the bit is 1, we add one to the number of 1-bits. We can check the ith bit of a number using a bit mask. We start with a mask
// mask=1, because the binary representation of 1 is 00000000000000000000000000000001. Clearly, a logical AND between any number and the mask 1 gives us the least significant bit
// of this number. To check the next bit, we shift the mask to the left by one.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Operator: such as addition of integers or exclusive-or of booleans would be translated into one (or few) assembler commands which would be directly executed by the processor
          (resp. its ALU). It would also be part of the syntax.

Function: or procedure, method, on the other hand, is a subprogram the (main) program would explicitly jump to during execution. That is, a new stack frame is allocated,
          register values are saved, parameters are passed and only then is the function executed. Furthermore, functions are defined by the programmer.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
File Descriptor:
    -in Unix and related computer operating systems, a file descriptor is an abstract indicator(handle) used to access a file or other input/output resource, such as a pipe or
     network socket. File descriptors form part of the POSIX application programming interface. A file descriptor is a non-negative integer, generally represented in the
     C programming language as the type int(negative values being reserved to indicate "no value" or an error condition).
