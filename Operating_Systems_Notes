POSIX: stands for Portable Operating System Interface, and is an IEEE standard designed to facilitate application portability. POSIX is an attempt by a consortium of vendors to
       create a single standard version of UNIX. If they are successful, it will make it easier to port applications between hardware platforms.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Interrupt ReQuest(IRQ)中断请求: “紧急事件”须向处理器提出申请（发一个电脉冲信号），要求“中断”，即要求处理器先停下“自己手头的工作”先去处理“我的急件”，
                               这一“申请”过程，称——中断请求。
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
struct Semaphore {
  int value;
  Queue<process> q;  // q contains all Process Control Blocks(PCBs) corresponding to processes got blocked while performing down operation.
}
P(Semaphore s){
  s.value = s.value - 1;
  if (s.value < 0) {
    // add process to queue
    // here p is a process which is currently executing
    q.push(p);
    block();
  }
  else
    return;
}

V(Semaphore s){
  s.value = s.value + 1;
  if (s.value <= 0) {
    // remove process p from queue
    q.pop();
    wakeup(p);
  }
  else
    return;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
页式存储管理:
页---相对物理块来说，页是逻辑地址空间（虚拟内存空间）的划分，是逻辑地址空间顺序等分而成的一段逻辑空间，并依次连续编号。页的大小一般为512B~8KB。
例如：一个32位的操作系统，页的大小设为2^12=4KB，那么就有页号从0编到2^20的那么多页逻辑空间。

物理块---物理块则是相对于虚拟内存对物理内存按顺序等大小的划分。物理块的大小需要与页的大小一致。
例如：2^31=2GB的物理内存，按照4KB/页的大小划分，可以划分成物理块号从0到2^19的那么多块的物理内存空间。

逻辑地址结构---页式存储管理中，逻辑地址可以解读成页号+地址偏移量（页内地址）。
一个32位的逻辑地址，页大小设为2^12=4KB。高20位则是页号，低12位则是页内地址。

页表---页表是记录逻辑空间（虚拟内存）中每一页在内存中对应的物理块号。但并非每一页逻辑空间都会实际对应着一个物理块，只有实际驻留在物理内存空间中的页才会对应着物理块。
页表是需要一直驻留在物理内存中的（多级页表除外），另外页表的起址和长度存放在PCB（Process Control Block）进程控制结构体中。
