三元运算符:
条件运算符"?:",其语法为:
// 条件表达式 ? 表达式1 : 表达式2;
bool b_show = true;
int state = b_show ? 0 : 1;
// state = 0;
语义:如果“条件表达式”为true，则整个表达式的值就是表达式1，忽略表达式2；如果“条件表达式”为false，则整个表达式的值就是表达式2，忽略表达式1。
等价于以下if/else语句:
Result result;
if (条件表达式)
{
    result = 表达式1;
}
else
{
    result = 表达式2;
}
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
Overload(重载)：在C++程序中，可以将语义、功能相似的几个函数用同一个名字表示，但参数或返回值不同（包括类型、顺序不同），即函数重载。
（1）相同的范围（在同一个类中）；
（2）函数名字相同；
（3）参数不同；
（4）virtual关键字可有可无。

Override(覆盖)：是指派生类函数覆盖基类函数，特征是：
（1）不同的范围（分别位于派生类与基类）；
（2）函数名字相同；
（3）参数相同；
（4）基类函数必须有virtual关键字。

Overwrite(重写)：是指派生类的函数屏蔽了与其同名的基类函数，规则如下：
（1）如果派生类的函数与基类的函数同名，但是参数不同。此时，不论有无virtual关键字，基类的函数将被隐藏（注意别与重载混淆）。
（2）如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有virtual关键字。此时，基类的函数被隐藏（注意别与覆盖混淆）。
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
#include<string>
using std::string;

string.length()
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
In C++, all containers (vector, stack, queue, set, map, etc) support both insert and emplace operations.
The advantage of emplace is, it does in-place insertion and avoids an unnecessary copy of object. For primitive data types, it does not
matter which one we use. But for objects, use of emplace() is preferred for efficiency reasons.

#include<vector>
using std::vector;

vector<someObject>.size()
vector<someObject>.begin()
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
#include<iostream>
using std::cout;

int main() {
  int a=5;
  int b=++a;
  int c=5;
  int d=c++;
  cout<<"a="<<a<<"\n";  // a=6
  cout<<"b="<<b<<"\n";  // b=6
  cout<<"c="<<c<<"\n";  // c=6
  cout<<"d="<<d<<"\n";  // d=5
  return 0;
}
(1) 如果用前缀运算符对一个变量增1(减1)，则在将该变量增1(减1)后，用新值在表达式中进行其他的运算。
(2) 如果用后缀运算符对一个变量增1(减1)，则用该变量的原值在表达式中进行其他的运算后，再将该变量增1(减1)。
