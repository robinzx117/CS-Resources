size_t:
    -Unsigned integral type. Alias of one of the fundamental unsigned integer types.
     It is a type able to represent the size of any object in bytes: size_t is the type returned by the sizeof operator and is widely used in the standard library to represent
     sizes and counts.

static const size_t npos = -1; // As a return value, it is usually used to indicate no matches.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const: is a promise that you will not try to modify the value once set.

static variable: a variable that has been allocated "statically", meaning that its lifetime (or "extent") is the entire run of the program.
                 as static variables are initialized only once and are shared by all objects of a class, the static variables are never initialized by a constructor. Instead,
                 the static variable should be explicitly initialized outside the class only once using the scope resolution operator (::).
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<iostream>
using std::cout;
int main() {
    int a=5;
    int b=++a;
    int c=5;
    int d=c++;
    cout<<"a="<<a<<"\n";  // a=6
    cout<<"b="<<b<<"\n";  // b=6
    cout<<"c="<<c<<"\n";  // c=6
    cout<<"d="<<d<<"\n";  // d=5
    return 0;
}
(1) 如果用前缀运算符对一个变量增1(减1)，则在将该变量增1(减1)后，用新值在表达式中进行其他的运算。
(2) 如果用后缀运算符对一个变量增1(减1)，则用该变量的原值在表达式中进行其他的运算后，再将该变量增1(减1)。

int i=0;
printf("%d%d%d", i++, i++, i++);
Output:210
Stack is used to store the parameters of any function in C and stack follows Last In First Out (LIFO) order. Therefore the parameter are evaluated in right to left order.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
三元运算符:
条件运算符"?:",其语法为:
// 条件表达式 ? 表达式1 : 表达式2;
bool ifSomething = true;
int state == ifSomething ? 0 : 1; // state = 0;
语义:如果“条件表达式”为true，则整个表达式的值就是表达式1，忽略表达式2；如果“条件表达式”为false，则整个表达式的值就是表达式2，忽略表达式1。
等价于以下if/else语句:
Result result;
if (条件表达式)
{
    result = 表达式1;
}
else
{
    result = 表达式2;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Static arrays:
    -are used when we know the amount of bytes in array at compile time. Static arrays are ones that reside on the stack.
    -char arr[10];
Dynamic array:
    -is used where we come to know about the size on run time. Dynamic arrays is a popular name given to a series of bytes allocated on the heap.
    -char *ptr = (char*) malloc(10); allocates a memory of 10 bytes on heap and we have taken the starting address of this series of bytes in a character pointer ptr.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
There may be cases where the memory needs of a program can only be determined during runtime. For example, when the memory needed depends on user input. On these cases,
programs need to dynamically allocate memory, for which the C++ language integrates the operators new and delete.
Dynamic memory is allocated using operator new. new is followed by a data type specifier and, if a sequence of more than one element is required, the number of these within
brackets []. It returns a pointer to the beginning of the new block of memory allocated. Its syntax is:
pointer = new type
pointer = new type [number_of_elements]
The first expression is used to allocate memory to contain one single element of type type. The second one is used to allocate a block (an array) of elements of type type,
where number_of_elements is an integer value representing the amount of these.

In most cases, memory allocated dynamically is only needed during specific periods of time within a program; once it is no longer needed, it can be freed so that the memory
becomes available again for other requests of dynamic memory. This is the purpose of operator delete, whose syntax is:
delete pointer;
delete[] pointer;
The first statement releases the memory of a single element allocated using new, and the second one releases the memory allocated for arrays of elements using new and a size
in brackets ([]).
The value passed as argument to delete shall be either a pointer to a memory block previously allocated with new, or a null pointer (in the case of a null pointer, delete
produces no effect).

C++ integrates the operators new and delete for allocating dynamic memory. But these were not available in the C language; instead, it used a library solution, with the
functions malloc, calloc, realloc and free, defined in the header <cstdlib> (known as <stdlib.h> in C). The functions are also available in C++ and can also be used to allocate
and deallocate dynamic memory. Note, though, that the memory blocks allocated by these functions are not necessarily compatible with those returned by new, so they should not be
mixed; each one should be handled with its own set of functions or operators.

 Feature                  | new/delete                     | malloc/free
--------------------------+--------------------------------+-------------------------------
 Memory allocated from    | 'Free Store'                   | 'Heap'
 Returns                  | Fully typed pointer            | void*
 On failure               | Throws (never returns NULL)    | Returns NULL
 Required size            | Calculated by compiler         | Must be specified in bytes
 Handling arrays          | Has an explicit version        | Requires manual calculations
 Reallocating             | Not handled intuitively        | Simple (no copy constructor)
 Call of reverse          | Implementation defined         | No
 Low memory cases         | Can add a new memory allocator | Not handled by user code
 Overridable              | Yes                            | No
 Use of (con-)/destructor | Yes                            | No

type variable = new type(parameter_list);
type variable = (type *)malloc(sizeof(type));
delete p;
delete [] p; // delete array
free(ptr);

Single pointer:
#include <iostream>
#define ROW 4
#define COL 5
int main(){
    int* A = new int[ROW*COL];
    for (int i=0; i<ROW; i++){
        for (int j=0; j<COL; j++){
            (A + i*COL)[j] = 1;
        }
    }
    for (int i=0; i<ROW; i++){
        for (int j=0; j<COL; j++){
            std::cout<<(A + i*COL)[j]<<" ";
        }
        std::cout<<std::endl;
    }
    delete [] A;
    return 0;
}

Array of pointers:
#include <iostream>
#define ROW 4
#define COL 5
int main(){
    int** A = new int*[ROW];
    for (int i=0; i<ROW; i++){
        A[i] = new int[COL];
    }
    for (int i=0; i<ROW; i++){
        for (int j=0; j<COL; j++){
            A[i][j] = 1;
        }
    }
    for (int i=0; i<ROW; i++){
        for (int j=0; j<COL; j++){
            std::cout<<A[i][j]<<" ";
        }
        std::cout<<std::endl;
    }
    for (int i=0; i<ROW; i++){
        delete[] A[i];
    }
    delete [] A;
    return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The most important function of C/C++ is main() function. It is mostly defined with a return type of int and without parameters:
    -int main() { /* ... */ }
We can also give command-line arguments in C and C++. Command-line arguments are given after the name of the program in command-line shell of Operating Systems.
To pass command line arguments, we typically define main() with two arguments: first argument is the number of command line arguments and second is list of command-line arguments.
    -int main(int argc, char *argv[]) { /* ... */ } or int main(int argc, char **argv) { /* ... */ }
Basically, char* argv[] means array of char pointers, whereas char** argv means pointer to a char pointer. In any array, the name of the array is a pointer to first element
of the array, that is, it contains the address of the first element.
    -argc(ARGument Count) is int and stores number of command-line arguments passed by the user including the name of the program. So if we pass a value to a program, value of
     argc would be 2(one for argument and one for program name).
    -argv(ARGument Vector) is array of character pointers listing all the arguments.
If argc is greater than zero, the array elements from argv[0] to argv[argc-1] will contain pointers to strings.
Argv[0] is the name of the program, after that till argv[argc-1] every element is command-line arguments.

Properties of Command Line Arguments:
    -They are passed to main() function.
    -They are parameters/arguments supplied to the program when it is invoked.
    -They are used to control program from outside instead of hard coding those values inside the code.
    -argv[argc] is a NULL pointer.
    -argv[0] holds the name of the program.
Note: You pass all the command line arguments separated by a space, but if argument itself has a space then you can pass such arguments by putting them inside double quotes "".

/* What's wrong with this program? */
/* Segmentation fault. Should be int main(int argc, char const ** argv). */
#include <stdio.h>
int main(int argc, char const * argv) {
    for(int i=0; i<argc; ++i) {
        printf("%s\n", argv[i]);
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Destructors:
    -is a special member function that is called when the lifetime of an object ends. The purpose of the destructor is to free the resources that the object may have acquired
     during its lifetime.
     ~ class_name ();

Copy constructors:
    -a copy constructor of class T is a non-template constructor whose first parameter is T&, const T&, volatile T&, or const volatile T&, and either there are no other
     parameters, or the rest of the parameters all have default values.
     class_name ( const class_name & );

Copy assignment operator:
    -a copy assignment operator of class T is a non-template non-static member function with the name operator= that takes exactly one parameter of type T, T&, const T&,
     volatile T&, or const volatile T&. For a type to be CopyAssignable, it must have a public copy assignment operator.
     class_name & class_name :: operator= ( class_name );

Rule of three:
    -if a class requires a user-defined destructor, a user-defined copy constructor, or a user-defined copy assignment operator, it almost certainly requires all three.
     Because C++ copies and copy-assigns objects of user-defined types in various situations (passing/returning by value, manipulating a container, etc), these special member
     functions will be called, if accessible, and if they are not user-defined, they are implicitly-defined by the compiler.
     The implicitly-defined special member functions are typically incorrect if the class is managing a resource whose handle is an object of non-class type (raw pointer,
     POSIX file descriptor, etc), whose destructor does nothing and copy constructor/assignment operator performs a "shallow copy" (copy the value of the handle, without
     duplicating the underlying resource).

Shallow copy:
    -because C++ does not know much about your class, the default copy constructor and default assignment operators it provides use a copying method known as a memberwise copy
     (also known as a shallow copy). This means that C++ copies each member of the class individually (using the assignment operator for overloaded operator=, and direct
     initialization for the copy constructor). When classes are simple (e.g. do not contain any dynamically allocated memory), this works very well.

Deep copy:
    -allocates memory for the copy and then copies the actual value, so that the copy lives in distinct memory from the source. This way, the copy and source are distinct and
     will not affect each other in any way. Doing deep copies requires that we write our own copy constructors and overloaded assignment operators.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
In C++, struct and class are exactly the same things, except for that struct defaults to public visibility and class defaults to private visibility.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Abstraction:
    -means displaying only essential information and hiding the details. Data abstraction refers to providing only essential information about the data to the outside world,
     hiding the background details or implementation.
    -Abstraction in classes:
         We can implement abstraction in C++ using classes. Class helps us to group data members and member functions using available access specifiers. A class can decide
         which data member will be visible to outside world and which is not.
    -Abstraction in header files:
         One more type of abstraction in C++ can be header files. For example, consider the pow() method present in math.h header file. Whenever we need to calculate power
         of a number, we simply call the function pow() present in the math.h header file and pass the numbers as arguments without knowing the underlying algorithm according
         to which the function is actually calculating power of numbers.
    -Advantages of data abstraction:
         1. Helps the user to avoid writing the low level code.
         2. Avoids code duplication and increases reusability.
         3. Can change internal implementation of class independently without affecting the user.
         4. Helps to increase security of an application or program as only important details are provided to the user.

Polymorphism:
    -means "many forms", and it occurs when we have many classes that are related to each other by inheritance. Inheritance lets us inherit attributes and methods from another
     class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.

#include <iostream>
using std::cout;

// Base class
class Animal {
    public:
        void animalSound() {
            cout<<"The animal makes a sound\n";
        }
};

// Derived class
class Dog : public Animal {
    public:
        void animalSound() {
            cout<<"The dog makes a sound\n";
        }
};

int main() {
    Animal animal;
    Dog dog;

    animal.animalSound();
    dog.animalSound();
    return 0;
}

Output:
The animal makes a sound
The dog makes a sound
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Overload(重载)：在C++程序中，可以将语义、功能相似的几个函数用同一个名字表示，但参数或返回值不同（包括类型、顺序不同），即函数重载。
（1）相同的范围（在同一个类中）；
（2）函数名字相同；
（3）参数不同；
（4）virtual关键字可有可无。

Override(覆盖)：是指派生类函数覆盖基类函数，特征是：
（1）不同的范围（分别位于派生类与基类）；
（2）函数名字相同；
（3）参数相同；
（4）基类函数必须有virtual关键字。

Overwrite(重写)：是指派生类的函数屏蔽了与其同名的基类函数，规则如下：
（1）如果派生类的函数与基类的函数同名，但是参数不同。此时，不论有无virtual关键字，基类的函数将被隐藏（注意别与重载混淆）。
（2）如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有virtual关键字。此时，基类的函数被隐藏（注意别与覆盖混淆）。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Virtual function:
    -is a member function which is declared within a base class and is re-defined(Overriden) by a derived class. When you refer to a derived class object using a pointer or a
     reference to the base class, you can call a virtual function for that object and execute the derived class’s version of the function.
     To implement virtual functions, C++ uses a special form of late binding known as the virtual table. The virtual table is a lookup table of functions used to resolve
     function calls in a dynamic/late binding manner. The virtual table sometimes goes by other names, such as "vtable", "virtual function table", "virtual method table",
     or "dispatch table".

class A{
public:
    void fun(){
        std::cout<<"fun"<<std::endl;
    }
    virtual void virtual_fun() {
        std::cout<<"virtual_fun"<<std::endl;
    }
};
A* a = NULL;
a->fun();
// Undefined behavior, so anything might happen.
// A possible result would be that it just prints "fun" since the method doesn't access any member variables of the object it is called on(the memory where the object supposedly
// lives doesn't need to be accessed, so access violations don't necessarily occur).
obj->virtual_fun();
// Calling a virtual function makes use of the so-called vtable, a table with all the addresses of the virtual functions of a class. In most implementation the first few bytes
// of the class object are used as point to the vtable. And that is why this example must fail: we don't have a class object and so the access to the vtable fails.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<string>
using std::string;
string.length()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
In C++, all containers (vector, stack, queue, set, map, etc) support both insert and emplace operations.
The advantage of emplace is, it does in-place insertion and avoids an unnecessary copy of object. For primitive data types, it does not
matter which one we use. But for objects, use of emplace() is preferred for efficiency reasons.

#include<vector>
using std::vector;
vector<someObject>.size()
vector<someObject>.begin()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <ctype.h>

int isalpha ( int c );
    -Check if character is alphabetic.
int isalnum ( int c );
    -Check if character is alphanumeric.
