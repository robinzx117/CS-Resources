https://docs.oracle.com/javase/8/docs/api/
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Access modifier:
If we do not specify any access modifier, it becomes “package-private”.
Package-private means the variable or method or class is accessible to its own class, and also to any other class in the same package.
1.对于public修饰符，它具有最大的访问权限，可以访问任何一个在CLASSPATH下的类，接口，异常等。它往往对于对外的情况，也就是对象或类对外的一种接口的形式。
2.对于protected修饰符，它主要的作用就是用来保护子类的。它的含义在于子类可以使用它修饰的成员，其他的不可以，它相当于传递给子类的一种继承的东西。
3.对于default来说，有的时候也称为friendly（友元），它是针对本包访问而设计的，任何处于本包下的类，接口，异常等，都可以互相访问，即使是父类没有用protected修饰的成员也可以。
4.对于private来说，它的访问权限仅限于类的内部，是一种封装的体现，例如，大多数的成员变量都是修饰为private的，它们不希望被其他任何外部的类访问。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
In the Java programming language, every application must contain a main method whose signature is:
public static void main(String[] args)
The main method accepts a single argument: an array of elements of type String.
This array is the mechanism through which the runtime system passes information to your application. For example:
java MyApp arg1 arg2
Each string in the array is called a command-line argument. Command-line arguments let users affect the operation of the application
without recompiling it.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
集合接口
1.Collection
Collection是最基本的集合接口，一个Collection代表一组Object，即Collection的元素, Java不提供直接继承自Collection的类，只提供继承于的子接口
(如List和set)。
Collection接口存储一组不唯一，无序的对象。
2.List
List接口是一个有序的Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，
第一个元素的索引为0，而且允许有相同的元素。
List接口存储一组不唯一，有序（插入顺序）的对象。
3.Set
Set具有与Collection完全一样的接口，只是行为上不同，Set不保存重复的元素。
Set接口存储一组唯一，无序的对象。
4.SortedSet
继承于Set保存有序的集合。
5.Map
Map接口存储一组键值对象，提供key（键）到value（值）的映射。
6.Map.Entry
描述在一个Map中的一个元素（键/值）对。是一个Map的内部类。
7.SortedMap
继承于Map，使Key保持在升序排列。
8.Enumeration
这是一个传统的接口和定义的方法，通过它可以枚举（一次获得一个）对象集合中的元素。这个传统接口已被迭代器取代。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
List<String> list = new ArrayList<String>();
Creates a List of type String, and the list can be potentially typecast into any other type of list. This is called decoupling. You are decoupling your code from a specific
implementation of the interface. The advantages it provides, is when writing large amounts of code, you can switch between types of lists to suit your preferences
(speed, memory etc), as all of your code, can treat your list as just type List. You can also pass a List as parameters and returns List from functions. And later on if you
are not happy with the ArrayList, you just change that one line of code.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.ArrayList;
import java.util.Iterator;

ArrayList<SomeObject> someObjects;
SomeObject[] anArray;

//iterator:
    Iterator<SomeObject> it = someObjects.iterator();
    while(it.hasNext())
    {
        SomeObject oneObject = it.next();
        if(oneObject != null)
        {...}
    }

//for-each loop:
    for(SomeObject oneObject : anArray)
    {
        if(oneObject != null)
        {...}
    }
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

HashMap<String, String> hash_map;
hash_map = new HashMap<String, String>();
if (hash_map != null){
    hash_map.put("Key", "Value");
}
hash_map.get("Key");

Set<String> stringKeys = hash_map.keySet();
Iterator<String> it = stringKeys.iterator();

while(it.hasNext()){
    String key = it.next();
    String value = hash_map.get(key);
}

Set<Map.Entry<String, String>> set = hash_map.entrySet();
for(Map.Entry<String, String> sl : set){
    System.out.println("The key is " + sl.getKey() + " and the value is " + sl.getValue() + ".");
}

getOrDefault(Object key, V defaultValue)
Is used to get the value mapped with specified key. If no value is mapped with the provided key then the default value is returned.

properties of a HashMap:
- no duplicate keys
- key-value pairs
- aka dictionary
- key maps to a value
- RPGS methods, among other methods
- in java.util 
- no order
- no primitive types allowed for keys or values
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
properties of a Set:
- no duplicate values
- no order
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Class Object is the root of the class hierarchy. Every class has Object as a superclass.
1.boolean equals(Object obj) - Indicates whether some other object is "equal to" this one.
2.int     hashCode()         - Returns a hash code value for the object.
3.String  toString()         - Returns a string representation of the object.

public class SomeClass {
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (this.getClass() != obj.getClass()) {
            return false;
        }
        SomeClass other = (SomeClass) obj;
        // Some code here...
        // if(){}
        // else{}
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Parent p = new Parent();
Child c = new Child();

Parent p2 = new Child(); // Substitution
Child c2 = new Parent(); // Problem; needs more code to make it work
if(p3.getClass().getName().equals("Child")){ // This Parent is actually a Child
    Child c3 = (Child)p3; // Casting makes it work
}
if(p4 instanceof Child){ // This Parent is a Child or other children
    Child c4 = (Child)p4;
}

public class Car extends Vehicle implements Comparable<Car> {
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Exception类是Throwable类的子类。除了Exception类外，Throwable还有一个子类Error。

Checked exceptions − A checked exception is an exception that is checked (notified) by the compiler at compilation-time, these are also
called as compile time exceptions. These exceptions cannot simply be ignored, the programmer should take care of (handle) these exceptions.

Unchecked exceptions − An unchecked exception is an exception that occurs at the time of execution. These are also called as Runtime Exceptions.
These include programming bugs, such as logic errors or improper use of an API. Runtime exceptions are ignored at the time of compilation.

try{
  // 程序代码
}catch(异常类型1 异常的变量名1){
  // 程序代码
}catch(异常类型2 异常的变量名2){
  // 程序代码
}finally{
  // 程序代码
}

fail():
    1.mark a test that is incomplete, so it fails and warns you until you can finish it
    2.making sure an exception is thrown:
    try{
      // do stuff...
      fail("Exception not thrown");
    }catch(Exception e){
      assertTrue(e.hasSomeFlag());
    }
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
To get a (pseudo-) random integer between, say, 60 and 75, we can do this:
import java.util.Random;
Random r = new Random();
r.nextInt(16); //0 to 15 inclusive
r.nextInt(16) + 60; //shifted up by 60, 0-15 becomes 60-75
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;

int getUserInputInt() {
    Scanner keyboardScanner;
    keyboardScanner = new Scanner(System.in);
    int userInt;
    String userString;
    System.out.print("Input the number:");

    if(keyboardScanner.hasNextInt()) // integer
    {
        userInt = keyboardScanner.nextInt();
        System.out.println("You input is " + userInt);
        return userInt;
    }
    else // not an integer
    {
        userString = keyboardScanner.next();
        System.err.println(userString + " is an error");
        return -1;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
public void pressEnterToContinue() {
    try {
        System.in.read();
    }
    catch(Exception e)
    {}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.concurrent.TimeUnit;

public void waitForSeconds(int numberOfSeconds) {
    try {
        TimeUnit.SECONDS.sleep(numberOfSeconds);
    }
    catch (InterruptedException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Before Java 11:
boolean blank = string.trim().isEmpty();

After Java 11:
boolean blank = string.isBlank();
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
double number;
String strNumber = String.format("%.4f", number).substring(0, 7);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.Arrays;

public static void sort(int[] arr, int from_Index, int to_Index)
arr        - the array to be sorted
from_Index - the index of the first element, inclusive, to be sorted
to_Index   - the index of the last element, exclusive, to be sorted
This method doesn't return any value.

Arrays.sort(arr);
Arrays.sort(arr, 1, 5);
Arrays.sort(arr, Collections.reverseOrder());
Arrays.sort() works for arrays which can be of primitive data type also. Collections.sort() works for objects Collections like ArrayList, LinkedList, etc.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
public String replaceAll(String regex, String replacement)
-regex       匹配此字符串的正则表达式。
-replacement 用来替换每个匹配项的字符串。
-成功则返回替换的字符串，失败则返回原始字符串。
